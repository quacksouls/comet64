> Query: Input contains integers between 1 and 20, inclusive.  Output them
> as Roman numerals.
> Example:
> [input: 2, output: II]
> [input: 4, output: IV]
> [input: 14, output: XIV]
// Let n be the input integer, where 1 <= n <= 20.  Let q and
// r be the quotient and remainder, respectively, after
// dividing n by 10.  We have these cases:
//
// (1) If q = 2, then n = 20.
// (2) If q = 1, then 10 <= n < 20.
// (3) If q = 0, then n < 10.
//
// We isolate the quotient q and remainder r.  Convert to
// Roman numeral on a case-by-case basis.
str = ;                // Clear the string register.
reg = input;           // Read the integer.
int = reg / 10;        // The quotient.
int = int * 10;        // The quotient as tens.
int = reg - int;       // The remainder.
switch int;            // Store the remainder.
int = reg / 10;        // The quotient.
reg = int;             // Quotient q.
switch int;            // Remainder r.
check reg = 2;         // Is q = 2?
jump if true: twenty;  // If so, go to "twenty".
check reg = 1;         // Is q = 1?
jump if true: ten;     // If so, go to "ten".
jump to: units;        // Otherwise integer < 10.
twenty:                // The "twenty" branch.
    str = XX;
    jump to: units;
ten:                   // The "ten" branch.
    str = X;
    jump to: units;
units:                 // The "units" branch.
    check int = 9;
    jump if true: nine;
    check int = 8;
    jump if true: eight;
    check int = 7;
    jump if true: seven;
    check int = 6;
    jump if true: six;
    check int = 5;
    jump if true: five;
    check int = 4;
    jump if true: four;
    check int = 3;
    jump if true: three;
    check int = 2;
    jump if true: two;
    check int = 1;
    jump if true: one;
    jump to: end;
nine:
    str = str + IX;
    jump to: end;
eight:
    str = str + VIII;
    jump to: end;
seven:
    str = str + VII;
    jump to: end;
six:
    str = str + VI;
    jump to: end;
five:
    str = str + V;
    jump to: end;
four:
    str = str + IV;
    jump to: end;
three:
    str = str + III;
    jump to: end;
two:
    str = str + II;
    jump to: end;
one:
    str = str + I;
    jump to: end;
end:
    output = str;
