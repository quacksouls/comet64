> Query: Input contains rock, paper, or scissors.  Read a value from input,
> compare it to the next input and output the winner of the
> rock-paper-scissors game.  If there is no winner, output "draw".
// Read two values from input.  Each value is a strategy, i.e.
// either "rock", "paper", or "scissors".  Compare the two
// strategies and determine the winner.  Output "draw" in case
// of no winner. Use the following abbreviations and integer
// values:
//
// p := paper, 16
// r := rock, 18
// s := scissors, 19
//
// The winners are:
//
// paper := (p - r)^2 = 4
// rock := (r - s)^2 = 1
// scissors := (s - p)^2 = 9
// draw := (p - p)^2 = (r - r)^2 = (s - s)^2 = 0
loop:                        // Start of "loop".
    str = input;             // Read first strategy.
    char = str[0];           // Abbreviation of strategy.
    reg = char;              // Integer value of strategy.
    str = input;             // Read second strategy.
    char = str[0];           // Abbreviation of strategy.
    int = char;              // Integer value of strategy.
    int = reg - int;         // Difference between integers.
    int = int * int;         // Squared of difference.
    check int = 4;           // Is paper the winner?
    jump if true: paper;     // If so, go to "paper".
    check int = 1;           // Is rock the winner?
    jump if true: rock;      // If so, go to "rock".
    check int = 9;           // Is scissors the winner?
    jump if true: scissors;  // If so, go to "scissors".
    output = draw;           // A draw.
    jump to: loop;           // Go to "loop".
paper:                       // The "paper" branch.
    output = paper;          // Paper wins.
    jump to: loop;           // Go to "loop".
rock:                        // The "rock" branch.
    output = rock;           // Rock wins.
    jump to: loop;           // Go to "loop".
scissors:                    // The "scissors" branch.
    output = scissors;       // Scissors wins.
